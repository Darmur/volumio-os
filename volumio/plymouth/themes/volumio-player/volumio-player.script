#  volumio-player.script - boot splash plugin with adaptive message rendering
#
#  Copyright (C) 2025 Volumio Srl
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2, or (at your option)
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.
#
#  Written by: Andrew Seredyn
#
#  References:
#    Freedesktop.org:
#      https://www.freedesktop.org/wiki/Software/Plymouth/Scripts/
#
#
#    Splash screen from video frames:
#     https://github.com/ToddServo/Plymouth-Animated-Boot-Screen-Creator
#

#------------------------------------------------ SEQUENCE ------------------------------------------------#

Window.SetBackgroundTopColor (0.0, 0.00, 0.0);
Window.SetBackgroundBottomColor (0.0, 0.00, 0.0);

for (i = 1; i < 90; i++)
  flyingman_image[i] = Image("progress-" + i + ".png");
flyingman_sprite = Sprite();

flyingman_sprite.SetX(Window.GetWidth() / 2 - flyingman_image[1].GetWidth() / 2);
flyingman_sprite.SetY(Window.GetHeight() / 2 - flyingman_image[1].GetHeight() / 2);

progress = 1;

#------------------------------------------------ MESSAGES ------------------------------------------------#

line_height = 20;
line_width = 80;
max_scroll_lines = 3;

font_size = "Sans 8";
if (Window.GetHeight() < 240) {
  font_size = "Sans 6";
  line_height = 16;
}

screen_height = Window.GetHeight();
screen_center_y = screen_height / 2;
image_half_height = flyingman_image[1].GetHeight() / 2;
image_bottom_y = screen_center_y + image_half_height;

max_text_y = screen_height - 10;
min_text_y = image_bottom_y + 10;

available_space = max_text_y - min_text_y;
num_scroll_lines = Math.Min(max_scroll_lines, Math.Floor(available_space / line_height));
if (num_scroll_lines < 1) {
  num_scroll_lines = 1;
}

scroll_block_height = num_scroll_lines * line_height;
message.y = min_text_y;
message.x = Window.GetWidth() / 2;
message.z = 1000;

for (index = 0; index < num_scroll_lines; index++) {
  lines[index] = Image.Text("", 1, 1, 1, 1, font_size);
  message[index] = Sprite();
  message[index].SetX(message.x - lines[index].GetWidth() / 2);
  message[index].SetY(message.y + (index * line_height));
  message[index].SetZ(10000);
  message[index].SetImage(lines[index]);

  fade_factor = 1.0 - (index * (1.0 / num_scroll_lines));
  message[index].SetOpacity(fade_factor);
}

fun StringLength(string) {
  pos = 0;
  str = String(string);
  while(str.CharAt(pos)) pos++;
  return pos;
}

fun scroll_message_callback(text) {
  if (StringLength(text) > line_width) {
    text = text.SubString(0, line_width - 3);
    text += "...";
  }

  for (index = 0; index < num_scroll_lines - 1; index++) {
    lines[index] = lines[index + 1];
  }

  lines[index] = Image.Text(text, 1, 1, 1, 1, font_size);

  for (index = 0; index < num_scroll_lines; index++) {
    message[index].SetImage(lines[index]);
    index_pos_x = Window.GetWidth() / 2 - lines[index].GetWidth() / 2;
    message[index].SetX(index_pos_x);
    message[index].SetY(message.y + (index * line_height));

    fade_factor = 1.0 - (index * (1.0 / num_scroll_lines));
    message[index].SetOpacity(fade_factor);
    message[index].SetZ(10000);
  }
}

#------------------------------------------------ STATUS --------------------------------------------------#

# Plymouth.SetUpdateStatusFunction(scroll_message_callback);

#------------------------------------------------ RENDER --------------------------------------------------#

Plymouth.SetMessageFunction(scroll_message_callback);

fun refresh_callback() {
  flyingman_sprite.SetImage(flyingman_image[Math.Int(progress / 3) % 90]);
  progress++;
}

Plymouth.SetRefreshFunction(refresh_callback);
